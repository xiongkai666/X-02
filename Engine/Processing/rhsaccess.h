#ifndef RHSACCESS_H
#define RHSACCESS_H

#include <QObject>
#include <QByteArray>
#include <QDebug>
#include <QQueue>
#include <QFile>
#include "PionwayDLL.h"

class RHSAccess : public QObject, public CPionway
{
    Q_OBJECT
public:
    explicit RHSAccess(QObject *parent = nullptr);

    QFile file_channel[16];

    bool StopFlag;
    int DeviceCount;
    std::string ID;
    QString qID;
    bool isSerialOpened;
    bool isEndPiontEnabled;
    int CloseOpCode;
    QString qisEndPiontEnabled;

    int epAddr_trigIn40 = 0x40;
    int epAddr_trigIn41 = 0x41;
    int epAddr_wireOut20 = 0x20;
    int epAddr_wireOut21 = 0x21;
    unsigned char* rddatabufc;
    int debug_count_rddatac = 0;

    QByteArray waveFormData;

    unsigned char rhscmd[16];
    unsigned char rhscmd_wrumdh1 = 0x00;
    unsigned char rhscmd_wrumdh2 = 0x00;
    unsigned char rhscmd_wrumdh3 = 0x00;
    unsigned char rhscmd_wrumdh4 = 0x00;
    unsigned char rhscmd_r1 = 0x00;
    unsigned char rhscmd_r2 = 0x00;
    unsigned char rhscmd_r3 = 0x00;
    unsigned char rhscmd_r4 = 0x00;
    unsigned char rhscmd_d1[2];
    unsigned char rhscmd_d2[2];
    unsigned char rhscmd_d3[2] = {0x00,0x00};
    unsigned char rhscmd_d4[2] = {0x00,0x00};
    void RHSCMDGen(QString RHSCMD_R1, QString RHSCMD_R2,QString RHSCMD_R3,QString RHSCMD_R4,
                   QString RHSCMD_D1, QString RHSCMD_D2,QString RHSCMD_D3,QString RHSCMD_D4,
                   QString RHSCMD_WRUMDH1, QString RHSCMD_WRUMDH2,QString RHSCMD_WRUMDH3,QString RHSCMD_WRUMDH4);
    void QSTring2HEX(QString src, unsigned char* des);


    //rhscmd[3]    rhscmd[2]     rhscmd[1]    rhscmd[0]
    //7-------0    7-------0     7-------0    7-------0
    //0000 0000    0000 0000     0000 0000    0000 0000
    //31-------    ---------     ---------    --------0
    //                  32bit cmd
    ////////////////////////////////////////////////////
    //                   EXAMPLE
    //                  32bit cmd(read 255)
    //31---------------------------------------------0
    //1100 0000    1111 1111    0000 0000    0000 0000
    //7-------0    7-------0    7-------0    7-------0
    //rhscmd[3]    rhscmd[2]    rhscmd[1]    rhscmd[0]
    //  c    0       f    f       0    0       0    0

    unsigned char rhscmd_initialize[256] =
    {
        0x00,0x00,0xfb,0xc0,//READ(251)
        0x00,0x00,0xfc,0xc0,//READ(252)
        0x00,0x00,0xfd,0xc0,//READ(253)
        0x00,0x00,0xfe,0xc0,//READ(254)
        0x00,0x00,0xff,0xc0,//READ(255)
        0x00,0x00,0x20,0x80,//WRITE(32,0x0000)
        0x00,0x00,0x21,0x80,//WRITE(33,0x0000)
        0xff,0xff,0x26,0x80,//WRITE(38,0xffff)
        0x00,0x00,0x00,0x6a,//CLEAR

        0x12,0x01,0x00,0x80,//WRITE(0,0x0112)
        0x1a,0x05,0x01,0x80,//WRITE(1,0x051a)
        0x41,0x00,0x02,0xa0,//WRITE(2,0x0041)
        0x80,0x00,0x03,0x80,//WRITE(3,0x0080)
        0x16,0x00,0x04,0x80,//WRITE(4,0x0016)
        0x17,0x00,0x05,0x80,//WRITE(5,0x0017)
        0xa8,0x00,0x06,0x80,//WRITE(6,0x00a8)
        0x0a,0x00,0x07,0x80,//WRITE(7,0x000a)
        0xff,0xff,0x08,0x80,//WRITE(8,0xffff)

        0x00,0x00,0x0a,0xa0,//WRITE(10,0x0000) u=1
        0xff,0xff,0x0c,0xa0,//WRITE(12,0xffff) u=1
        0xe2,0x00,0x22,0x80,//WRITE(34,0x00e2)
        0x80,0x00,0x24,0x80,//WRITE(36,0x0080)
        0x00,0x4f,0x25,0x80,//WRITE(37,0x4f00)
        0x00,0x00,0x2a,0xa0,//WRITE(42,0x0000) u=1
        0x00,0x00,0x2c,0xa0,//WRITE(44,0x0000) u=1
        0x00,0x00,0x2e,0xa0,//WRITE(46,0x0000) u=1

        0x00,0x00,0x30,0xa0,//WRITE(48,0x0000) u=1

        0x00,0x80,0x40,0xa0,//WRITE(64,0x8000) u=1
        0x00,0x80,0x41,0xa0,
        0x00,0x80,0x42,0xa0,
        0x00,0x80,0x43,0xa0,
        0x00,0x80,0x44,0xa0,
        0x00,0x80,0x45,0xa0,
        0x00,0x80,0x46,0xa0,
        0x00,0x80,0x47,0xa0,
        0x00,0x80,0x48,0xa0,
        0x00,0x80,0x49,0xa0,
        0x00,0x80,0x4a,0xa0,
        0x00,0x80,0x4b,0xa0,
        0x00,0x80,0x4c,0xa0,
        0x00,0x80,0x4d,0xa0,
        0x00,0x80,0x4e,0xa0,
        0x00,0x80,0x4f,0xa0,//WRITE(79,0x8000) u=1

        0x00,0x80,0x60,0xa0,//WRITE(96,0x8000) u=1
        0x00,0x80,0x61,0xa0,
        0x00,0x80,0x62,0xa0,
        0x00,0x80,0x63,0xa0,
        0x00,0x80,0x64,0xa0,
        0x00,0x80,0x65,0xa0,
        0x00,0x80,0x66,0xa0,
        0x00,0x80,0x67,0xa0,
        0x00,0x80,0x68,0xa0,
        0x00,0x80,0x69,0xa0,
        0x00,0x80,0x6a,0xa0,
        0x00,0x80,0x6b,0xa0,
        0x00,0x80,0x6c,0xa0,
        0x00,0x80,0x6d,0xa0,
        0x00,0x80,0x6e,0xa0,
        0x00,0x80,0x6f,0xa0,//WRITE(111,0x8000) u=1

        0x00,0x00,0x20,0x80,//WRITE(32,0x0000)
        0x00,0x00,0x21,0x80,//WRITE(33,0x0000)

        0x00,0x00,0xff,0xd0,//READ(255) m=1

        0x00,0x00,0xff,0xc0,//READ(255) m=1
        0x00,0x00,0xff,0xd0,//READ(255) m=1
    };



signals:

    //void WriteRHSData(QString);

    void ReadRHSData(QString);

    void CONVERTStartState(QString);

    void ReadRHSDataContinuous(QString);

public slots:

    void InitializeXMS6302(int &DeviceCount, QString &qID, bool &isSerialOpened);

    void SetSampleRate(QVariant);

    void setFPGAbit();

    void ResetFPGA();

    void InitializeRHS2116();

    void convertStart();

    void convertStop();

    void impedanceConvertStart();

    void impedanceConvertStop();

    void ReadFromRHSContinuous();

    void StopReading();

    void DebugFPGA();
};

#endif // RHSACCESS_H
